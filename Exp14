//Binary search tree implementation using array (lab experiment 14)(28 April)
#include <stdio.h>
#include <stdlib.h>
#define MAX 100
int tree[MAX];
int size=0 ;

void initalize(){
    for(int i=0;i<MAX;i++){
        tree[i] = -1;
    }
}
void insert(int root, int value){
    if(root >= MAX){
        printf("Tree is full\n");
        return;
    }
   else if(tree[root] == -1){
        tree[root] = value;
        size++;
    }
    else if(value < tree[root]){
        insert(2 * root + 1, value);
    }
    else if(value > tree[root]){
        insert(2 * root + 2, value);
    }
    
}
void preorder(int root) {
    if (tree[root] == -1) {
        return;
    }
    printf("%d ", tree[root]);
    preorder(2 * root + 1);
    preorder(2 * root + 2);
}
void inorder(int root){
    if (tree[root] == -1) {
        return;
    }
    inorder(2 * root + 1);
    printf("%d ", tree[root]);
    inorder(2 * root + 2);
}
void postorder(int root){
    if (tree[root] == -1) {
        return;
    }
    postorder(2 * root + 1);
    postorder(2 * root + 2);
    printf("%d ", tree[root]);
}
int search(int root,int target){
    int i=0;
    while(i<MAX && tree[i] != -1){
        if(tree[i] == target){
            return i;
        }
        else if(target < tree[i]){
            i = 2 * i + 1;
        }
        else{
            i = 2 * i + 2;
        }
    }
    return -1;
}
int findmin(int i){
    while(i*2+1<MAX && tree[i*2+1] != -1){
        i = 2 * i + 1;
    }
    return i;
}
int findmax(int i){
    while(i*2+2<MAX && tree[i*2+2] != -1){
        i = 2 * i + 2;
    }
    return i;
}
void delete(int value, int root){
 int i = search(i,value);
    if(i == -1){
        printf("Element not found\n");
        return;
    }
    else{
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if((left>=MAX || tree[left] == -1) && (right >= MAX || tree[right]==-1)){//case to delete leaf node
            tree[i] = -1;

        }
        else if(left >= MAX || tree[left] == -1) {//case to delete node with only one child(left child)
            int min = findmin(right);
            tree[i] = tree[min];
            delete(min,tree[min]);
        }
        else if(right>=MAX && tree[right] != -1){//case to delete node with only one child(right child)
            int max = findmax(left);
            tree[i] = tree[max];
            delete(max,tree[max]);
        }
        else{//case to delete node with two children
            int min = findmin(right);
            tree[i] = tree[min];
            delete(tree[min], min);
        
        }
    }
}

int main(){
    int n;
    initalize();
    while(1){
        printf("1.Insert\n");
        printf("2.Preorder\n");
        printf("3.Inorder\n");
        printf("4.Postorder\n");
        printf("5.Search\n");
        printf("6.Delete\n");
        printf("7.Exit\n");
        int choice,value,index,target,val;
        printf("Enter your choice: ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
                printf("Enter Value: ");
                scanf("%d",&n);
                insert(0,n);

                break;
            case 2:
                printf("Preorder Traversal: ");
                preorder(0);
                printf("\n");
                break;
            case 3:
                printf("Inorder Traversal: ");
                inorder(0);
                printf("\n");
                break;
            case 4:
                printf("Postorder Traversal: ");
                postorder(0);
                printf("\n");
                break;
           case 5:
                printf("Enter element to search: ");
                scanf("%d",&target);
                index=search(0,target) ;
                if(index != -1){
                    printf("Element found\n");
                }
                else{
                    printf("Element not found\n");
                }
                break;
            case 6:
                printf("Enter element to delete: ");
                scanf("%d",&val);
                delete(val,0); 
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
        printf("\n");
    }
}
