#include <stdio.h>
#include <stdlib.h>

// Define node
typedef struct node {
    int data;
    struct node *next;
} Node;

// Declare head pointer.
Node* head = NULL;

Node* createNode(int ele) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = ele;
    newNode->next = NULL;
    return newNode;
}

// Insert at beginning
void insertNodeInBeg(int ele) {
    Node* newNode = createNode(ele);
    newNode->next = head;
    head = newNode;
    printf("New Node inserted at beginning!\n");
}

// Insert at end
void insertNodeAtEnd(int ele) {
    Node* newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    printf("Node inserted at end!\n");
}

// Insert at any position
void insertNodeAtAnyPos(int ele, int pos) {
    if (pos < 1) {
        printf("Invalid position!\n");
        return;
    }
    if (pos == 1) {
        insertNodeInBeg(ele);
        return;
    }
    Node* temp = head;
    int i = 1;
    while (temp != NULL && i < pos - 1) {
        temp = temp->next;
        i++;
    }
    if (temp == NULL) {
        printf("Position out of range!\n");
        return;
    }
    Node* newNode = createNode(ele);
    newNode->next = temp->next;
    temp->next = newNode;
    printf("Node inserted at position %d!\n", pos);
}

// Delete from beginning
void deleteFromBeg() {
    if (head == NULL) {
        printf("List is empty!\n");
        return;
    }
    Node* temp = head;
    head = head->next;
    free(temp);
    printf("Node deleted from beginning!\n");
}

// Delete from end
void deleteFromEnd() {
    if (head == NULL) {
        printf("List is empty!\n");
        return;
    }
    if (head->next == NULL) {
        free(head);
        head = NULL;
        printf("Node deleted from end!\n");
        return;
    }
    Node* temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
    printf("Node deleted from end!\n");
}

// Delete from any position
void deleteFromAnyPos(int pos) {
    if (head == NULL || pos < 1) {
        printf("Invalid operation!\n");
        return;
    }
    if (pos == 1) {
        deleteFromBeg();
        return;
    }
    Node* temp = head;
    int i = 1;
    while (temp->next != NULL && i < pos - 1) {
        temp = temp->next;
        i++;
    }
    if (temp->next == NULL) {
        printf("Position out of range!\n");
        return;
    }
    Node* delNode = temp->next;
    temp->next = delNode->next;
    free(delNode);
    printf("Node deleted from position %d!\n", pos);
}

// Search for an element
void search(int ele) {
    Node* temp = head;
    int pos = 1;
    while (temp != NULL) {
        if (temp->data == ele) {
            printf("Element %d found at position %d!\n", ele, pos);
            return;
        }
        temp = temp->next;
        pos++;
    }
    printf("Element %d not found!\n", ele);
}

// Sort the linked list
void sort(){
    Node *last = NULL;
    for(Node* i=head; i->next!=NULL;i=i->next){
    Node *j;
        for(j=head; j->next!=last; j=j->next){
            if(j->data > j->next->data){
                int temp = j->data;
                j->data = j->next->data;
                j->next->data = temp;
            }
        }
        last = j;
    }
    printf("List Sorted !!!!!");
}


// Display linked list
void display() {
    if (head == NULL) {
        printf("List is empty!\n");
        return;
    }
    Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int choice, value, pos;
    while (1) {
        printf("\n<----- Singly Linked List ----->\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Insert at any position\n");
        printf("4. Delete from beginning\n");
        printf("5. Delete from end\n");
        printf("6. Delete from any position\n");
        printf("7. Search an element\n");
        printf("8. Sort list\n");
        printf("9. Display list\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &value);
                insertNodeInBeg(value);
                break;
            case 2:
                printf("Enter value: ");
                scanf("%d", &value);
                insertNodeAtEnd(value);
                break;
            case 3:
                printf("Enter value and position: ");
                scanf("%d %d", &value, &pos);
                insertNodeAtAnyPos(value, pos);
                break;
            case 4:
                deleteFromBeg();
                break;
            case 5:
                deleteFromEnd();
                break;
            case 6:
                printf("Enter position: ");
                scanf("%d", &pos);
                deleteFromAnyPos(pos);
                break;
            case 7:
                printf("Enter value to search: ");
                scanf("%d", &value);
                search(value);
                break;
            case 8:
                sort();
                break;
            case 9:
                display();
                break;
            case 10:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }
    return 0;
}
