//Binary Search Tree Implementation using linked list (lab experiment 16)(1 May)
#include <stdio.h>
#include<stdlib.h>

struct TreeNode
{
    struct TreeNode* left;
    int data;
    struct TreeNode* right;
};

struct TreeNode* createNode(int value)
{
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->data = value;
    node->left = node->right = NULL;
    return node;
}

struct TreeNode* insert(struct TreeNode* root, int value)
{
    if(root == NULL)
        return createNode(value);
    else if (value < root->data)
        root->left = insert(root->left,value);
    else if (value > root->data)
        root->right = insert(root->right,value);
        return root;
}

void preorder(struct TreeNode* root)
{
    if(root == NULL)
        return;
    printf("%d", root->data);
    preorder(root->left);
    preorder(root->right);
}

void inorder(struct TreeNode* root)
{
    if(root == NULL)
        return;
    printf("%d", root->data);
    inorder(root->left);
    inorder(root->right);
}

void postorder(struct TreeNode* root)
{
    if(root == NULL)
        return;
    postorder(root->left);
    postorder(root->right);
    printf("%d", root->data);
}


struct TreeNode* search(struct TreeNode* root, int value)
{
    if(root == NULL)
        return NULL;
    else if (value == root->data)
        return root;
    else if (value < root->data)
        return search(root->left,value);
    else
        return search(root->right, value);
}
struct TreeNode* findmin(struct TreeNode* root)
{
    while(root->left != NULL)
        root = root->left;
    return root;
}

struct TreeNode* delete(struct TreeNode* root, int value)
{
    if(root == NULL)
        return NULL;
    else if(value < root->data){
        root->left = delete(root->left,value);
    }
    else if(value> root->data){
        root->right = delete(root->right,value);
    }
    else
    {
        if(root->left == NULL && root->right == NULL)//zero child
        {
            free(root);
            return NULL;
        }
        else if(root->right == NULL)//For left child only
        {
            struct TreeNode* temp = root->left;
            free(root);
            return temp;
        }
        else if(root->left == NULL)//For right child only
        {
            struct TreeNode* temp = root->right;
            free(root);
            return temp;
        }
        else//For two child
        {
            struct TreeNode* temp = findmin(root->right);
            root->data = temp->data;
            delete(root->right,temp->data);

            
        }
    }
}

int main()
{
    while(1)
    {
        printf("1. Insert\n");
        printf("2. Pre-order\n");
        printf("3. In-order\n");
        printf("4. Post-order\n");
        printf("5. Search\n");
        printf("6. Delete\n");
        printf("7. Exit\n");

        int choice,value;
        struct TreeNode* root = NULL;
        printf("Enter Choice :");
        scanf("%d",&choice);

        switch(choice)
        {
            case 1:
                printf("Enter value : ");
                scanf("%d", &value);
                root = insert(root, value);
                break;
            case 2:
                preorder(root);
                break;
            case 3:
                inorder(root);
                break;
            case 4:
                postorder(root);
                break;
            case 5:
                printf("Enter Value to Search : ");
                scanf("%d",&value);
                if(search(root,value) == NULL)
                    printf("Element NOT Found!!!\n");
                else    
                    printf("Element  found!!!\n");
                break;
            case 6:
                printf("Enter Value to Delete : ");
                scanf("%d",&value);
                if(delete(root,value) == NULL)
                    printf("Element not deleted!!!\n");
                else
                {
                    root = delete(root,value);
                    printf("Element   deleted Deleted!!!\n");
                
                break;
            case 7:
                exit(0);
                break;
            default:
                printf("Invalid Choice !!!\n");
        }
        printf("\n");
    }
}
}
