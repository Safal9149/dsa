//Queue impletention using linked list(lab experiment 11)(16 april)
#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* next;
};
struct Node* front = NULL;
struct Node* rear = NULL;
void enqueue(int value){
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    if(temp == NULL){
        printf("Queue Overflow\n");
    }
    else{
        temp->data = value;
        temp->next = NULL;
        if(front == NULL && rear == NULL){
            front = rear = temp;
        }
        else{
            rear->next = temp;
            rear = temp;
        }
        printf("Element Inserted: %d\n", value);
    }
}
int dequeue() {
    if (front == NULL) {
        printf("Queue Underflow\n");
        return -1;
    } else {
        struct Node* temp = front;
        front = front->next;
        if (front == NULL) {
             rear = NULL;
        }
        int valu = temp->data;
        free(temp);
        return valu;
    }
}
int peek() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return -1;
    } else {
        return front->data;
    }
}
void display(){
    if(front == NULL){
        printf("Queue is empty\n");
    }
    else{
        struct Node* temp = front;
               printf("Queue elements:");
        while(temp != NULL){
            printf("%d ", temp->data);
            temp = temp->next;
        }
        printf("\n");}}
int main(){
    while(1){
        printf("1.Enqueu\n");
        printf("2.Dequeue\n");
        printf("3.Peek\n");
        printf("4.Display\n");
        printf("5.Exit\n");
        int choice, data,res;
        printf("Enter choice : ");
        scanf("%d", &choice);
        switch(choice){
            case 1:
                printf("Enter element: ");
                scanf("%d", &data);
                enqueue(data);
                
            break;
            case 2:
                res = dequeue();
                if(res != -1){
                    printf("Element popped: %d\n", res);
                }
            break;
            case 3:
            res = peek();
            if(res != -1){
                printf("Element at top: %d\n", res);
            }
            break;
            case 4:
                display();
            break;
            case 5:
                exit(0);
            break;
            default:
                printf("Invalid choice\n");
        }
    }
}
